setwd("~/Google Drive/Project_R")
workingDir <- getwd()
dataDir <- file.path(workingDir, "Data")
resultsDir <- file.path(workingDir, "Results")
library(devtools) # Personalize easily ggplot2 graphs: ggplot2.customize()
library(easyGgplot2) # Personalize easily ggplot2 graphs: ggplot2.customize()
library(factoextra) # Visualize Clustering Results: fviz_cluster()
library(ggpubr) # correlation plot: ggscatter(); qq plot: ggqqplot()
library(gridExtra) # grid.arrange()
library(kohonen) # Clustering: SOM maps supersom()
library(lawstat) # Goodness-of-fit tests for the Laplace distribution: levene.test()
library(lsmeans) # Least-squares means (or predicted marginal means): lsmeans(); Methods for obtaining analyses ref.grid and lsmobj objects: contrast()
library(nortest) # Lilliefors (Kolmogorov-Smirnov) test for normality: lillie.test()
library(plotrix) # Add table to plot: addtable2plot()
library(pROC)# Functions to plot ROC curve: ci.auc(), ci.se(), ci.sp(), coords(), plot.roc(), roc()
library(Rmisc) # Summarizes data: summarySE()
library(ROCR) # Values of prediction and kinds of predictor evaluations: performance(), prediction()
library(xlsx) #  read.xlsx()
library(vcd) # structable() mosaic()
library(verification) # Get information of ROC curve(AUC, cases, p.value): roc.area()
library(visreg) # Visualization of regression functions: visreg()
# Load data
data <- read.xlsx(file=paste(dataDir,"/data.xlsx", sep=""),1)
data <- data[,-1]
# Create two groups: divide the population according to a categorical variable
control <- subset(data, data$Patient=="No")
patient <- subset(data, data$Patient=="Yes")
## Frequency
par(mfrow=c(1,2), mar=c(5,4,5,1)) # Output add two plots in same grid
# mfrow: a vector of length 2, where the first argument specifies the number of rows and the second the number of columns of plots.
# mar: a numeric vector of length 4, which sets the margin sizes in the following order: bottom, left, top and right.
hist(control$Age, freq=T, col="lightblue")
hist(patient$Age, freq=T, col="lightpink", main="Patients", xlab="Age", ylab="Frequency", xlim=c(10, 70))
## Density
par(mfrow=c(1,2))
hist(control$Age, freq=F, col="lightblue")
hist(patient$Age, freq=F, col="lightpink", main="Patients", xlab="Age")
## Box plot
par(mfrow=c(1,2))
boxplot(control$Age, horizontal=T,col="#006699", boxwex=0.5)
boxplot(patient$Age,horizontal=T, col="#FF6699", boxwex=0.5, main="Patients", xlab="Age")
par(mfrow=c(1,2), mar=c(5,1,2,1))
boxplot(control$Age, horizontal=T,col="#006699", boxwex=0.5)
boxplot(patient$Age,horizontal=T, col="#FF6699", boxwex=0.5, main="Patients", xlab="Age")
## QQ plot
# Simple way
par(mfrow=c(1,2), mar=c(5,4,5,1))
qqnorm(control$Age, main="Control")
qqnorm(patient$Age, main="Patient")
# Aesthetic way
qqControl <- ggqqplot(control$Age)
qqPatient <- ggqqplot(patient$Age)
grid.arrange(qqControl, qqPatient, ncol=2) # Output add two plots in same grid
## Stacking graphics
# Overhead plot
ggplot(data, aes(Age, fill = Patient)) + geom_histogram(binwidth = 2) + scale_fill_manual(values=c("#006699", "#FF6699"))
# Comparison Density plot
ggplot(data, aes(Age, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(values=c("#006699", "#FF6699"))
# Save plot
png(paste(resultsDir,"/ggplot_Age_Patient.png", sep=""), width=300, height=300, res=300, pointsize=8)
ggplot(data, aes(Age, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(values=c("#006699", "#FF6699"))
dev.off()
# Save plot
png(paste(resultsDir,"/ggplot_Age_Patient.png", sep=""), width=10, height=10, res=300, pointsize=8)
ggplot(data, aes(Age, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(values=c("#006699", "#FF6699"))
dev.off()
# Save plot
png(paste(resultsDir,"/ggplot_Age_Patient.png", sep=""), width=10000, height=10000, res=300, pointsize=8)
ggplot(data, aes(Age, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(values=c("#006699", "#FF6699"))
dev.off()
# Save plot
png(paste(resultsDir,"/ggplot_Age_Patient.png", sep=""), width=1000, height=1000, res=300, pointsize=8)
ggplot(data, aes(Age, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(values=c("#006699", "#FF6699"))
dev.off()
# NUMERIC VARIABLES: frequencies of samples
tableSumAge <- summarySE(data, measurevar="Age", groupvars="Patient", na.rm=TRUE)
tableSumAge
tableSumBMI <- summarySE(data, measurevar="BMI", groupvars="Patient", na.rm=TRUE)
tableSumBMI[1:4]
tableSumBMI <- summarySE(data, measurevar="BMI", groupvars="Sex", na.rm=TRUE)
tableSumBMI[1:4]
# CATEGORICAL VARIABLES: contingency table
# First colum=variable, second colum=groups, third colum=frequency. It is necessaty add the function dnn(dimension names) to do the contingency table
table(data$Sex, data$Patient, dnn=c("Sex", "Patient"))
# library(vcd)
structable(data$Sex, data$Patient)
mosaic( ~ Sex + Patient, data=data)
###############
#     BMI     #
###############
lillie.test(control$BMI)
lillie.test(patient$BMI)
cat("Conclusion: These distributions are normal. Therefore t Test will be done.")
# Check homoscedasticity
# Levene test is more robust
(homocedasticityValue <- (levene.test(data$BMI, data$Patient))$p.value)
cat("Conclusion: the p-value is < 0.05  . According to Levene test the variances are not equals.")
# Ratio of variances is less robust
(homocedasticityValue <- var(control$BMI)/var(patient$BMI))
cat("Conclusion: the p-value is > 0.05  . According to ratio of variances, the variances are equals.")
homocedasticityBoolean <- TRUE
t.test(data$BMI ~ data$Patient, var.equal=homocedasticityBoolean)
cat("Conclusion: the p-value is < 0.05 . Accordingly the difference between groups is significant.")
ggplot(data, aes(BMI, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(data$Patient, values=c("#006699", "#FF6699"))
lillie.test(control$Age)
lillie.test(patient$Age)
# Results in a prety table
# Start
test <- as.data.frame(table(lillie.test(control$Age)))
statistic <- format(round(as.numeric(as.character(test$statistic)),3),nsmall = 3)
p.value <- format(round(as.numeric(as.character(test$p.value)),3),nsmall = 3)
if(p.value<=0.5){
message<- c("No") # It is not normal
}else{
message <- c("Yes") # It is normal
}
dtControl <- data.frame("Variable"= paste("Age", "Control"), "statistic"=statistic, "p.value"=p.value, "Normality"=message)
test <- as.data.frame(table(lillie.test(patient$Age)))
statistic <- format(round(as.numeric(as.character(test$statistic)),3),nsmall = 3)
p.value <- format(round(as.numeric(as.character(test$p.value)),3),nsmall = 3)
if(p.value<=0.5){
message<- c("No") # It is not normal
}else{
message <- c("Yes") # It is normal
}
dtPatient <- data.frame("Variable"= paste("Age", "Patient"), "statistic"=statistic, "p.value"=p.value, "Normality"=message)
dtControl
dtPatient
cat("Conclusion: These distributions are not normal. Therefore Wilcoxon Test will be done.")
wilcox.test(control$Age, patient$Age)
wilcox.test(data$Age ~ data$Patient)
# Results in a prety table
# Start
wilcox <- wilcox.test(control$Age, patient$Age)
statistic <- format(round(wilcox$statistic, 3), nsmall = 3)
p.value <- format(round(wilcox$p.value, 3), nsmall = 3)
# Making results table
dtAge <- data.frame("Variable"="Control", "Statistic"=statistic, "p.value"=p.value, "Method"=wilcox$method)
dtAge
cat("Conclusion: the p-value is > 0.05 . Therefore the difference between groups are not significant.")
ggplot(data, aes(Age, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(data$Patient, values=c("#006699", "#FF6699"))
chisq <- chisq.test(data$Sex, data$Patient)# simulate.p.value=TRUE, B = 2000, correct = FALSE)  NOT DO MONTECARLO !!
statistic <- format(round(chisq$statistic, 3), nsmall = 3)
p.value <- format(round(chisq$p.value, 3), nsmall = 3)
dtSex <- data.frame("Variable"="Sex", "Statistic"=statistic, "p.value"=p.value, "Method"=chisq$method)
dtSex
cat("Conclusion: the p-value is < 0.05. Therefore exits differences and the variables are dependant.")
table(data$Sex, data$Patient, dnn=c("Sex", "Patient"))
mosaic( ~ Sex + Patient, data=data)
cat("Conclusion: Sex should be included as a factor in the analysis of covariance.")
## Check normality
lillie.test(control$Molecule1)
lillie.test(patient$Molecule1)
cat("Conclusion: both are normal so we can do ANCOVA analysis. (Note: ANOVA is the same that t.student in this case).")
# ANOVA
formula <- Molecule1 ~ Patient  # Dependent variable ~ independent variables
model <- aov(as.formula(formula), data)
anova(model)
# ANCOVA
formula <- Molecule1 ~ Patient + Age + BMI + Sex  # Dependent variable ~ independent variables
model <- aov(as.formula(formula), data)
anova(model)
ggplot(data, aes(Molecule1, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(data$Patient, values=c("#006699", "#FF6699"))
## Check normality
lillie.test(control$Molecule2)
lillie.test(patient$Molecule2)
cat("Conclusion: both do not normal so we can do not ANCOVA analysis. We can do a transformation: log10, sqrt, etc).")
controlLog10 <- log10(control$Molecule2)
patientLog10 <- log10(patient$Molecule2)
lillie.test(controlLog10)
lillie.test(patientLog10)
cat("Conclusion: the distributions are not normal so we can not do  ANCOVA analysis.")
## Check normality
man <- subset(data, data$Sex=="Man")
woman <- subset(data, data$Sex=="Woman")
## Check normality
lillie.test(man$Molecule2)
lillie.test(woman$Molecule2)
cat("Conclusion: both do normal so we can do ANCOVA analysis.")
# ANCOVA
formula <- Molecule1 ~ Patient + Age + BMI + Sex  # Dependent variable ~ independent variables
model <- aov(as.formula(formula), data)
anova(model)
ggplot(data, aes(Molecule2, fill = Sex)) + geom_density(alpha=0.2) + scale_fill_manual(data$Sex, values=c("#006699", "#FF6699"))
## Check normality
lillie.test(control$Molecule3)
lillie.test(patient$Molecule3)
cat("Conclusion: one is not normal (but is near) so we can do ANCOVA analysis.")
# ANCOVA
formula <- Molecule3 ~ Patient + Age + BMI + Sex  # Dependent variable ~ independent variables
model <- aov(as.formula(formula), data)
anova(model)
cat("Conclusion: no exist relationship.")
ggplot(data, aes(Molecule3, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(data$Patient, values=c("#006699", "#FF6699"))
## Check normality
lillie.test(control$Molecule4)
lillie.test(patient$Molecule4)
cat("Conclusion: both normal so we can do ANCOVA analysis.")
# ANCOVA
formula <- Molecule4 ~ Patient + Age + BMI + Sex  # Dependent variable ~ independent variables
model <- aov(as.formula(formula), data)
anova(model)
cat("Conclusion: molecule4 is very different in each group.")
ggplot(data, aes(Molecule4, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(data$Patient, values=c("#006699", "#FF6699"))
## Check normality
lillie.test(control$Molecule5)
lillie.test(patient$Molecule5)
cat("Conclusion: one are not normal so we can not do ANCOVA analysis. We can do a transformation: log10, sqrt, etc).")
# Transformation log10
data$Molecule5Log <- round(log10(data$Molecule5),3)
# Add subgroups
control <- subset(data, data$Patient=="No")
patient <- subset(data, data$Patient=="Yes")
# Normality
lillie.test(control$Molecule5Log)
lillie.test(patient$Molecule5Log)
cat("Conclusion: both normal so we can do ANCOVA analysis.")
# ANCOVA
formula <- Molecule5Log ~ Patient + Age + BMI + Sex  # Dependent variable ~ independent variables
model <- aov(as.formula(formula), data)
anova(model)
cat("Conclusion: Molecule5Log is very different in each group.")
cat("Molecule5Log:")
ggplot(data, aes(Molecule5Log, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(data$Patient, values=c("#006699", "#FF6699"))
cat("Back-transformation:")
# exp 10
data$Molecule5exp10 <- round(10^(data$Molecule5Log),3)
# Add subgroups
control <- subset(data, data$Patient=="No")
patient <- subset(data, data$Patient=="Yes")
ggplot(data, aes(Molecule5exp10, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(data$Patient, values=c("#006699", "#FF6699"))
cat("Original:")
ggplot(data, aes(Molecule5, fill = Patient)) + geom_density(alpha=0.2) + scale_fill_manual(data$Patient, values=c("#006699", "#FF6699"))
## EMM
# Least-squares means (also called predicted marginal means) are predictions from a linear model over
# a  reference grid, or marginal averages thereof.
EMM <- lsmeans(model, ~ Patient)
EMM
# Show Estimated Marginal Means and its exclusion limits (upper CL and lower)
summaryTable <- summary(EMM)
tableEMM <- summaryTable <- transform(summaryTable, lsmean.backTransf=10^(lsmean), Lower.backTransf=10^(lower.CL), Upper.backTransf=10^(upper.CL))
tableEMM
## EMM molecule plot:
renamed <- gsub("_", " ", names(tableEMM)[1])
# Use 95% confidence interval instead of SEM
g <- ggplot(tableEMM, aes_string(x=names(tableEMM)[1], y=names(tableEMM)[2], fill=names(tableEMM)[1])) +
geom_bar(stat="identity", color="black") + # geom_bar uses stat="count" which makes the height of the bar proportion to the number of cases in each group (or if the weight aethetic is supplied, the sum of the weights). If you want the heights of the bars to represent values in the data, use stat="identity" and map a variable to the y aesthetic.
geom_errorbar(aes(ymin=lower.CL, ymax=upper.CL), width=.1) +
scale_y_continuous(expand=c(0,0)) + # 'y' axis starts in zero
scale_fill_manual(renamed, values=c("white", "gray")) +
labs(x="", y="pg/mL")
g
# remove grid: remove top and right borders around the plot
ggplot2.customize(g, backgroundColor="white", removePanelGrid=TRUE,removePanelBorder=TRUE, axisLine = c(0.5, "solid", "black"))
## Visualization of model:
par(mfrow=c(1,1), mar=c(5,4,5,1))
visreg(model, "Patient", ylab="pg/mL")
## 5.1.- Spearman
cor <- cor.test(data$Age, data$Molecule3, method="spearman", exact=FALSE) # Avoid warning: Cannot compute exact p-value with ties
# Terms:
correlation <- format(round(cor$estimate,3), nsmall=3)
pvalue <- format(round(cor$p.value, 3), nsmall=3)
statistic <- format(round(cor$statistic, 3), nsmall=3)
# Table:
tableCorrelation <- data.frame("Statistic"=paste("t", statistic), "Correlation"=correlation, "p-value"=pvalue, check.names=FALSE)
tableCorrelation
## 5.2.- Pearson
correlationMethod <- "pearson"
cor <- cor.test(data$Age, data$Molecule3, method=correlationMethod)
# Terms:
correlation <- format(round(cor$estimate,3), nsmall=3)
pvalue <- format(round(cor$p.value, 3), nsmall=3)
statistic <- format(round(cor$statistic, 3), nsmall=3)
# Table:
tableCorrelation <- data.frame("Statistic"=paste("t", statistic), "Correlation"=correlation, "p-value"=pvalue, check.names=FALSE)
tableCorrelation
# Plot
ggscatter(data=data, x="Age", y="Molecule3", add="reg.line", conf.int=TRUE,
cor.coef=TRUE, cor.method=correlationMethod, main="Correlation plot",
xlab="Age", ylab="Molecule1")
# Formula
formula <- Patient ~ Molecule2
# Model: it does a model with cofactors, dependence variable and one cofactor at least
modelROC <- glm(as.formula(formula), data=data, family = binomial("logit"))
# predict function: values of predictions
predict_link <- predict(modelROC, data, type="link")
# predict function: values of predictions in response scores
predict_response <- predict(modelROC, data=data, type="response")#, se=TRUE)
summary(predict_response)
predict_response <- predict(modelROC, data=data, type="response", se=TRUE)
#predict_response$fit
summary(predict_response$fit)
#target_class <- data$CUD
target_class <- data$Patient
obj.roc <- roc(target_class, predict_response$fit, smooth=FALSE, auc=TRUE, direction="<")
plot(obj.roc, col="pink", lwd=3, percent=TRUE, main="ROCs with all cytokines")
auc(obj.roc)
# prediction function
predictionObject <- prediction(predict_response$fit, target_class) # prediction: need the 'Group' variable without missing values
# performance
performanceObject <- performance(predictionObject, "sens", "fpr")
# plotting the ROC curve
plot(performanceObject,col="black",lty=3, lwd=3, xlab="1 - Specificity", percent=TRUE)
# calculating AUC
auc <- performance(predictionObject,"auc")
auc
# now converting S4 class to vector
auc <- unlist(slot(auc, "y.values"))
# adding min and max ROC AUC to the center of the plot
minauc<-min(round(auc, digits = 2))
maxauc<-max(round(auc, digits = 2))
minauct <- paste(c("min(AUC)  = "),minauc,sep="")
maxauct <- paste(c("max(AUC) = "),maxauc,sep="")
legend(0.45,0.25,c(minauct,maxauct,"\n"),border="white",cex=1.2,box.col = "white")
# Avoid white space between the y-axis and the left-most part of the plot, and similarly for the right side of the plot.
par(pty="s")
# Roc plot
rocobj <- plot.roc(target_class, predict_response$fit, percent=TRUE, main="Confidence interval",
ci=TRUE, # compute AUC (of AUC by default)
print.auc=TRUE) # print the AUC (will contain the CI)
ciobj <- ci.se(rocobj, # CI of sensitivity
specificities=seq(0, 100, 5)) # over a select set of specificities
plot(ciobj, type="shape", col="#1c61b6AA") # plot as a blue shape
plot(ci(rocobj, of="thresholds", thresholds="best")) # add one threshold
#------------- Prety plot II ---------------
# ROC object
rocObject <- roc(data$Patient, predict_response$fit, ci=TRUE)
# p.value
target_class_numeric <- as.numeric(revalue(data$Patient, c("Yes"=1, "No"=0)))-1 # -1 implies levels 0 and 1
dat <- roc.area(target_class_numeric, predict_response$fit)
rocPvalue <- dat$p.value
# ROC plot
# Plotting ROC curve: is necessary performance object (coordinates x and y) to plot and inside it calculates Area Under Curve (AUC)
rocPlotFunction <- function(performanceRegLog, rocObject, rocPvalue, sizeLine){
# Values of interest: CI95%, p.value, SE, AUC. They are all in dt (data.frame)
ciValue <- paste(format(round(ci.auc(rocObject)[1], 3), 3), "-", format(round(ci.auc(rocObject)[3], 3), 3))
pValue <- format(round(rocPvalue, 3), nsmall=3)
SE <- format(round(sqrt(var(rocObject)), 3), nsmall=3)
auc <- format(round(auc(rocObject), 3), nsmall=3)
dt <- data.frame("AUC"=auc, "95%CI"=ciValue, "SE"=SE, "p-value"=pValue, check.names=FALSE)
# Plotting ROC curve: is necessary performance object (coordinates x and y)
# Option 1: minimum hollow before 0 value
plot(performanceRegLog, col="black", lty=1, lwd=as.numeric(sizeLine), xlab="1 - Specificity", percent=TRUE, main="ROC curve", legacy.axes = TRUE)
# Option2: plot(rocObject, col="black", lty=1, lwd=2, percent=TRUE, main="ROC curve", legacy.axes = TRUE)
# Add diagonal line
lines(x = c(0.0,1.0), y = c(0.0,1.0), col="grey")
# Add table with information of AUC below plot
addtable2plot(0.2,0.01,dt,lwd=1,bty="o",hlines=FALSE,vlines=FALSE,xpad=0.5,ypad=1)
}
rocPlotFunction(performanceObject,  rocObject, rocPvalue, sizeLine=2)
# Option 1: all data
dat1 <- data
# Option 2: selected data
dat1 <- data[, c("Age","Molecule3", "Molecule4", "Molecule5")]
hc <- hclust(dist(dat1), method="single") # ("single", "complete" or "average")
plot(hc, main="Hierarchical Clustering", xlab="All population")
rect.hclust(hc,k=6,border = 2:7)
# Produces an object of class "som" which is a Self-Organizing Map fit of the data. SOM with multiple parallel maps.
ss <- supersom(scale(dat1), grid= somgrid(3, 3, "rectangular")) # ("hexagonal" or "rectangular")
par(mfrow=c(1,3))
plot(ss)
plot(ss, type = "counts", main = "SOM: count map")
plot(ss, type = "quality", main = "SOM: quality map")
## 6.3.- K-means
dat1 <- data[, c("Molecule1","Molecule3")]
km <- kmeans(dat1, centers=3, nstart = 25) # Centers is a number, nstart indicate how many random sets should be chosen
# Visualize clustering results
# stand=TRUE -> data is standardized before principal component analysis
fviz_cluster(km, data=as.data.frame(dat1), geom=c("point","text"), ellipse.type="norm")
